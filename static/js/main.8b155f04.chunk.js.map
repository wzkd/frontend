{"version":3,"sources":["config/config.js","App.js","reportWebVitals.js","index.js"],"names":["config","contract_address","App","useState","account","setAccount","amount","setAmount","supply","setSupply","isPrivate","setIsPrivate","isPublic","setIsPublic","ethers","utils","parseEther","price","setPrice","wlPrice","setWlPrice","isMinting","setIsMinting","isAllowed","setIsAllowed","merkleTree","setMerkleTree","useEffect","eth","window","ethereum","web3","Web3","wrapper","a","request","method","then","on","accounts","console","log","location","reload","mt","buildMerkleTree","getChainId","chainId","contract","Contract","build","abi","methods","totalSupply","call","s","p","wp","priv","pub","getAccounts","length","address","isAddress","proof","getHexProof","keccak256","allowed","onMintPublic","amt","toBN","publicMint","estimateGas","from","value","mul","send","mintOnReceipt","mintOnHash","mintOnError","estimateOnError","leafNodes","allowlist","map","addr","MerkleTree","sortPairs","onMintPrivate","privateMint","err","errMsg","message","includes","toast","error","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","code","hash","info","href","target","rel","receipt","success","updateSupply","onIncrement","onDecrement","onSelectAll","event","focus","select","onAmountChanged","className","onClick","onChange","type","renderSelector","style","marginBottom","renderMintingSoon","disabled","fromWei","renderPublicMint","renderPrivateMint","renderTotalSupply","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8b155f04.chunk.js","sourcesContent":["const config = {\n    1: {\n        contract_address: '0xa626F0c2d01281D9f82bfb47Eb39f5Ef66a92d17'\n    },\n    4: {\n        contract_address: '0x198A84955Ed779B74eBEf7Cb2DAb668c20388875'\n    }\n}\n\nexport default config;","import './App.css';\n// import Navbar from './components/Navbar';\nimport Web3 from \"web3\";\nimport { useEffect, useState } from 'react';\nimport build from \"./contracts/WZKD.json\";\nimport allowlist from \"./contracts/allowlist.json\";\nimport config from \"./config/config\";\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport {ethers} from \"ethers\";\nimport keccak256 from \"keccak256\";\nimport MerkleTree from \"merkletreejs\";\n\nfunction App() {\n  const [account, setAccount] = useState({});\n  const [amount, setAmount] = useState(1);\n  const [supply, setSupply] = useState(0);\n  const [isPrivate, setIsPrivate] = useState(false);\n  const [isPublic, setIsPublic] = useState(false);\n  const [price, setPrice] = useState(ethers.utils.parseEther(\"0.068\"));\n  const [wlPrice, setWlPrice] = useState(ethers.utils.parseEther(\"0.048\"));\n  const [isMinting, setIsMinting] = useState(false);\n  const [isAllowed, setIsAllowed] = useState(false);\n  const [merkleTree, setMerkleTree] = useState({});\n\n  useEffect(()=>{\n    const eth = window.ethereum;\n    const web3 = new Web3(eth);\n\n    const wrapper = async () => {\n      await eth.request({ method: 'eth_requestAccounts' });\n    }\n    wrapper().then(async ()=>{\n      try {\n        eth.on('accountsChanged', async (accounts) => {\n          console.log(accounts);\n        });\n        eth.on('chainChanged', () => {\n          window.location.reload();\n        });\n        const mt = buildMerkleTree();\n        setMerkleTree(mt);\n        const chainId = await web3.eth.getChainId();\n        const contract = new web3.eth.Contract(build.abi, config[chainId].contract_address);\n        const s = await contract.methods.totalSupply().call({})\n        setSupply(s);\n        const p = await contract.methods.price().call({});\n        setPrice(p);\n        const wp = await contract.methods.wlPrice().call({});\n        setWlPrice(wp);\n        const priv = await contract.methods.isPrivate().call({});\n        setIsPrivate(priv);\n        const pub = await contract.methods.isPublic().call({});\n        setIsPublic(pub);\n        // get address\n        let address;\n        const accounts = await web3.eth.getAccounts();\n        if (accounts.length > 0) address = accounts[0];\n        else if (Web3.utils.isAddress(accounts)) address = accounts;\n\n        const proof = mt.getHexProof(keccak256(address))\n        const allowed = await contract.methods.isAllowed(proof, address).call({});\n        setIsAllowed(allowed);\n\n        setAccount({\n          web3,\n          chainId,\n          address,\n          contract,\n        });\n        // await updateSupplyCounter(c);\n      } catch(err) {\n        console.log(err)\n      }\n    })\n  }, []);\n\n  const onMintPublic = async () => {\n    const { contract, address } = account;\n    setIsMinting(true);\n\n    const amt = Web3.utils.toBN(amount);\n    const p = Web3.utils.toBN(price);\n    try {\n      await contract.methods.publicMint(amt).estimateGas({\n        from: address,\n        value: p.mul(amt)\n      });\n      contract.methods.publicMint(amt).send({\n        from: address,\n        value: p.mul(amt)\n      }).on('receipt', mintOnReceipt)\n      .on('transactionHash', mintOnHash)\n      .on('error', mintOnError);\n    } catch (err) {\n      estimateOnError(err)\n    }\n  }\n  function buildMerkleTree() {\n    const leafNodes = allowlist.map((addr) => keccak256(addr));\n    const merkleTree = new MerkleTree(leafNodes, keccak256, {\n      sortPairs: true,\n    });\n    return merkleTree;\n  }\n\n  const onMintPrivate = async () => {\n    const { contract, address } = account;\n    const proof = merkleTree.getHexProof(keccak256(address))\n    setIsMinting(true);\n\n    const amt = Web3.utils.toBN(amount);\n    const p = Web3.utils.toBN(wlPrice);\n    try {\n      await contract.methods.privateMint(amt, proof).estimateGas({\n        from: address,\n        value: p.mul(amt)\n      });\n      contract.methods.privateMint(amt, proof).send({\n        from: address,\n        value: p.mul(amt)\n      }).on('receipt', mintOnReceipt)\n      .on('transactionHash', mintOnHash)\n      .on('error', mintOnError);\n    } catch (err) {\n      estimateOnError(err)\n    }\n  }\n\n  const estimateOnError = (err) => {\n    let errMsg = `Error occurred ${err}`;\n    if(err.message.includes('Pausable: paused')) {\n      errMsg = 'Minting is paused';\n    }\n    toast.error(errMsg, {\n      position: \"bottom-center\",\n      autoClose: 5000,\n      hideProgressBar: false,\n      closeOnClick: true,\n      pauseOnHover: true,\n      draggable: true,\n      progress: undefined,\n    });\n    setIsMinting(false);\n  }\n\n  const mintOnError = (error) => {\n    let errMsg = `error occurred ${error}`;\n    if(error.code === 4001) {\n      errMsg = 'Transaction rejected'\n    }\n    toast.error(errMsg, {\n      position: \"bottom-center\",\n      autoClose: 5000,\n      hideProgressBar: false,\n      closeOnClick: true,\n      pauseOnHover: true,\n      draggable: true,\n      progress: undefined,\n    });\n    setIsMinting(false);\n  }\n\n  const mintOnHash = (hash) => {\n    toast.info(<a href={`https://etherscan.io/tx/${hash}`} target=\"_blank\" rel=\"noreferrer\">Processing your mint</a>, {\n      position: \"bottom-center\",\n      autoClose: 5000,\n      hideProgressBar: true,\n      closeOnClick: false,\n      pauseOnHover: true,\n      draggable: true,\n      progress: undefined,\n    })\n    setIsMinting(false);\n  };\n\n  const mintOnReceipt = (receipt) => {\n    toast.success('Minted!', {\n      position: \"bottom-center\",\n      autoClose: 5000,\n      hideProgressBar: false,\n      closeOnClick: true,\n      pauseOnHover: true,\n      draggable: true,\n      progress: undefined,\n      });\n      updateSupply();\n      setIsMinting(false);\n  }\n\n  const onIncrement = () => {\n    if(amount >= 20) return;\n    setAmount(amount+1);\n  }\n\n  const onDecrement = () => {\n    if(amount <= 1) return;\n    setAmount(amount-1);\n  }\n\n  const onSelectAll = event => {\n    event.target.focus();\n    event.target.select();\n  }\n\n  const onAmountChanged = event => {\n    const value = event.target.value;\n    if(value > 10) setAmount(10);\n    else if(value < 1) setAmount(1);\n    else setAmount(value);\n  }\n\n  const updateSupply = async () => {\n    const { contract } = account;\n    const s = await contract.methods.totalSupply().call({})\n    setSupply(s - 1);\n  }\n\n  const renderPublicMint = () => {\n    if(!isPublic) return;\n    return (<div>\n      <p className='title-text'>Public Mint</p>\n      <button onClick={onMintPublic} className='mint-btn' disabled={isMinting}>MINT FOR {\n        Web3.utils.fromWei(\n          Web3.utils.toBN(price).mul(Web3.utils.toBN(amount)), \n          \"ether\"\n          )} ETH</button>\n    </div>)\n  }\n\n  const renderPrivateMint = () => {\n    if(!isPrivate) return;\n    if(!isPublic && !isAllowed) return <p className='title-text' style={{marginBottom: '4vh'}}>You are not whitelisted</p>;\n    if(isAllowed) {\n      return (<div>\n        <p className='title-text'>Private Mint</p>\n        <button onClick={onMintPrivate} className='mint-btn' disabled={isMinting}>MINT FOR {\n          Web3.utils.fromWei(\n            Web3.utils.toBN(wlPrice).mul(Web3.utils.toBN(amount)), \n            \"ether\"\n            )} ETH</button>\n      </div>)\n    }\n  }\n\n  const renderSelector = () => {\n    if(!isPrivate && !isPublic) return;\n    return (<div className='selector-container'>\n      <button onClick={onDecrement} className='selector-btn'>-</button>\n      <input onClick={onSelectAll} onChange={onAmountChanged} value={amount} type=\"number\"/>\n      <button onClick={onIncrement} className='selector-btn'>+</button>\n      </div>)\n  }\n\n  const renderMintingSoon = () => {\n    if(isPrivate || isPublic) return;\n    return <p className='title-text' style={{marginBottom: '4vh'}}>Minting Soon</p>;\n  }\n\n  const renderTotalSupply = () => {\n    if(!isPrivate && !isPublic) return;\n    return <p className='supply-text'>{supply}/5678</p>;\n  }\n\n  return (\n    <div className='background'>\n      {/* <Navbar/> */}\n      <div className='mint-container'>\n        {renderSelector()}\n        {renderMintingSoon()}\n        {renderPublicMint()}\n        {renderPrivateMint()}\n        {renderTotalSupply()}\n      </div>\n        <ToastContainer />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}